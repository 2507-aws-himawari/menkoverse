// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id])
    refresh_token_expires_in Int?

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    Authenticators Authenticator[]
    deck         Deck[]
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Follower {
    id      String @id @unique
    name    String @unique
    cost    Int
    attack  Int
    hp      Int
    DeckCards DeckCard[]
    RentalDeckCards RentalDeckCard[]
}

model Deck {
    id        String @id @unique
    userId    String
    name      String
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    DeckCards DeckCard[]
}

model DeckCard {
    id        String @id @unique
    deckId    String
    followerId String
    deck      Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)
    follower  Follower @relation(fields: [followerId], references: [id], onDelete: Cascade)
}

model RentalDeck {
    id        String   @id @unique
    name      String

    RentalDeckCards RentalDeckCard[]
}

model RentalDeckCard {
    id           String @id @unique
    rentalDeckId String
    followerId   String

    rentalDeck RentalDeck @relation(fields: [rentalDeckId], references: [id], onDelete: Cascade)
    follower   Follower   @relation(fields: [followerId], references: [id])
}